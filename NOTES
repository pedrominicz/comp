(* Section 2.1 of the Intel Manual

  Intel 64 and IA-32 architectures.
  Instruction format:
    (IPrefixes) (Opcode) (ModR/M) (SIB)    (Displacement) (Immediate)
     0/1/2/3/4   1/2/3    1 ifreq  1 ifreq  0/1/2/4        0/1/2/4

  ModR/M: (Mod) (Reg/Opcode) (R/M)
          7   6 5          3 2   0

  SIB: (Scale) (Index) (Base)
       7     6 5     3 2    0


  The ModR/M:
    This is an addressing-form specifier byte, it contains three fields:
    + Mod: Combined with R/M it forms 32 possible values, eight registers
           and 24 addressing modes.
    + Reg/Opcode: Specifies either a register number or three more bits
                  of opcode information, its purpose is specified by the
                  primary opcode.
    + R/M: Specifies either a register as operand or, combined with Mod
           it specifies an addressing mode.

    Some combinations of ModR/M require a the SIB.

  The SIB:
    The SIB byte includes the following fields:
    + Scale: The scale factor.
    + Index: The register number of the index register.
    + Base: The register number of the base register.

  The Displacement:
    Depends on the addressing form.

  The Immediate:
    This is an immediate operand for the instruction.


  The default operand size is 32bits (unless REX prefix or 0x66 operand
  size prefix), the default address size is 64bits (unless 0x67 address
  size prefix).

  For the ModR/M and SIB meaning, see Table 2-1, 2-2, 2-3 pages 574,
  575 and 576 of the Intel manual.

  All instructions in 64-Bit mode have a default instruction size
  of 32 bits except:
    * Near branches.
    * All instructions, except far branches, that implicitely
      reference Rsp.
*)

(* Dynamic linking and ELF format

  The executable file generated needs dynamic linking to resolve external
  functions. The bare minimum to have an ELF file with dynamic linking must
  include the following.
  
  A program header table (even for static link we need it) with three entries.
  One is a PT_LOAD containing the executable's code, one is a PT_INTERP to
  specify our dynamic linker (/lib64/ld-linux-x86-64.so.2) and the last one is
  PT_DYNAMIC containing links to sections needed by the dynamic linker.

  A section header table is optional, however it might help during the
  debugging process because many ELF tools rely on it.
  If present the table contains the following entries:
  + A .hash section
  + A .strtab section
    This is a list of strings needed in other places in the ELF file, for
    instance the interpreter's name is found here.
  + A .symtab section
  + A .rel section (this is what we really care about)
    It stores the list of relocations the dynamic linker needs to perform in
    the binary.
  + A .dynamic section
    This is the run time information needed by the dynamic linker to retreive
    the contents of all the previous sections.

  The layout of files generated is the following:
    +----------------+
    |   ELF Header   | <- 0x40 bytes
    +----------------+
    | Program Header | <- 0xa8 bytes
    |     Table      |    = 3 * 0x38
    +----------------+
    | Section Header | <- 0x140 bytes
    |     Table      |    = 5 * 0x40
    +----------------+
    |  Entry Point & |
    |  Program Code  |
    +----------------+
    | String Table   | <- follows program so we
    +----------------+    only fix alignment once
    |    Symbols     |
    |     Table      |
    +----------------+
    |   Relocation   |
    |     Table      |
    +----------------+
    |   Hash Table   |
    +----------------+
    |    Dynamic     |
    |    Section     |
    +----------------+

*)

(* Compiler notes

  Integers (values of type int) are stored on 64bits in memory. However, you
  can only load 32bits values in, this can easily be changed in the compiler.
  Obviously this choice implies that the implementation does not respect the
  System V 64bits ABI. This should not cause much trouble except for the
  following:

  + You can use ++ and -- operators on external integers, but it is at your
    own risk.
  + Same with regular assignments (errno = 42 might screw everything up).
  + All function calls should work though. However note that if an external
    function returns a negative int, you will see a big positive value because
    I do not sign extend the result.

  Function calls are limited to 6 arguments.

*)
