#!/bin/sh

set -e

trap clean 0 1 2 3 6

clean() {
  rm -f {Lex,Parse}.hs a.out {,Eval/}*.{hi,o}
}

#time swipl -c generate_test.pl --stand_alone=true --goal=main -o a.out
#time ./a.out >test.txt
#exit

GHC="$(which ghc)"
GHC="$GHC -Wall -Werror -Wcompat -Wredundant-constraints -Wno-name-shadowing"
GHC="$GHC -O2"
GHC="$GHC -rtsopts -with-rtsopts=-M4g"
GHC="$GHC -o a.out"

ghc() {
  time $GHC "$@"
}

alex Lex.x
happy -acg Parse.y

#ghc -c {Syntax,Expr}.hs
#ghc -ddump-to-file -ddump-simpl -dsuppress-all -dno-suppress-type-signatures -fforce-recomp -c ANF.hs
#exit

#ghc -prof -fprof-auto -rtsopts -with-rtsopts=-p Main.hs
ghc Main.hs
./a.out <test.txt |wc -l
#time ./a.out <<EOF
#(\n f,n(\c i,i(c(\f x,i f(f x))))(\x,f)(\x,x))(\s z,s(s(s(s(s(s(s(s z))))))))(\n,n+1)0
#EOF
#profiteur a.out.prof
exit

#ghc -dynamic -main-is Bench.main Bench.hs
#./a.out --csv bench.csv --output bench.html
#exit

case "$1" in
  Main.hs)  runhaskell Main.hs;;
  *.hs)     ghci "$1";;
  *.pl)     swipl "$1";;
  *.x)      ghci Lex.hs;;
  *.y)      ghci Parse.hs;;
  *)        echo "cannot run '$1'";;
esac
