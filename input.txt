10
Int 10
10.
Float 10.0
10.2
Float 10.2
a.(2)
Get (Var "a") (Int 2)
-1
Neg (Int 1)
-1.
Float -1.0
1 + 1
Add (Int 1) (Int 1)
1 - 1
Sub (Int 1) (Int 1)
1 +. 1
FAdd (Int 1) (Int 1)
1 -. 1
FSub (Int 1) (Int 1)
1 *. 1
FMul (Int 1) (Int 1)
1 /. 1
FDiv (Int 1) (Int 1)
2 + 3 *. 4
Add (Int 2) (FMul (Int 3) (Int 4))
2 + 3 + 4
Add (Add (Int 2) (Int 3)) (Int 4)
(2 + 3) *. 4
FMul (Add (Int 2) (Int 3)) (Int 4)
a = b
Eq (Var "a") (Var "b")
a <> b
Not (Eq (Var "a") (Var "b"))
a <= b
LE (Var "a") (Var "b")
a >= b
LE (Var "b") (Var "a")
a < b
Not (LE (Var "b") (Var "a"))
a > b
Not (LE (Var "a") (Var "b"))
1 = 1 = true
Eq (Eq (Int 1) (Int 1)) (Bool True)
2. +. 2. = 2. *. 2.
Eq (FAdd (Float 2.0) (Float 2.0)) (FMul (Float 2.0) (Float 2.0))
-2.
Float -2.0
----0.
Float 0.0
----2
Neg (Neg (Neg (Neg (Int 2))))
2 + -2
Add (Int 2) (Neg (Int 2))
2 + -2.
Add (Int 2) (Float -2.0)
-2 + 2
Add (Neg (Int 2)) (Int 2)
-2. + 2
Add (Float -2.0) (Int 2)
hello world
App (Var "hello") ([Var "world"])
a -b
Sub (Var "a") (Var "b")
-a b
Neg (App (Var "a") ([Var "b"]))
f x y -z
Sub (App (Var "f") ([Var "x", Var "y"])) (Var "z")
-f x y -z
Sub (Neg (App (Var "f") ([Var "x", Var "y"]))) (Var "z")
1, 2, 3
Tuple [Int 1, Int 2, Int 3]
a, b, c
Tuple [Var "a", Var "b", Var "c"]
2. +. 2. = 2. *. 2., -2. + 2, -f x y -z
Tuple [Eq (FAdd (Float 2.0) (Float 2.0)) (FMul (Float 2.0) (Float 2.0)), Add (Float -2.0) (Int 2), Sub (Neg (App (Var "f") ([Var "x", Var "y"]))) (Var "z")]
a.(1) <- 1
Put (Var "a") (Int 1) (Int 1)
a.(1) <- 1 + 2
Put (Var "a") (Int 1) (Add (Int 1) (Int 2))
a.(1) <- 1 = 2
Put (Var "a") (Int 1) (Eq (Int 1) (Int 2))
a.(1) <- 1, 2
Put (Var "a") (Int 1) (Tuple [Int 1, Int 2])
a.(0).(1) <- 1
Put (Get (Var "a") (Int 0)) (Int 1) (Int 1)
a.(a.(0) <- 1) <- 1
Put (Var "a") (Put (Var "a") (Int 0) (Int 1)) (Int 1)
1;2;3
Let "" (Unit) (Int 1) (Let "" (Unit) (Int 2) (Int 3))
a.(1; 0) <- 1, 2
Put (Var "a") (Let "" (Unit) (Int 1) (Int 0)) (Tuple [Int 1, Int 2])
a.(a.(0) <- 1) <- 1; 2
Let "" (Unit) (Put (Var "a") (Put (Var "a") (Int 0) (Int 1)) (Int 1)) (Int 2)
const () 3.; 4
Let "" (Unit) (App (Var "const") ([Unit, Float 3.0])) (Int 4)
let x = 2 in x
Let "x" (Var (Nothing)) (Int 2) (Var "x")
let (a,b,c) = (1,2,3) in a
LetTuple [("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing))] (Tuple [Int 1, Int 2, Int 3]) (Var "a")
let rec const x y = x in const () 3.; 4
LetRec "const" (Var (Nothing)) [("x", Var (Nothing)), ("y", Var (Nothing))] (Var "x") (Let "" (Unit) (App (Var "const") ([Unit, Float 3.0])) (Int 4))
let rec ack x y = if x <= 0 then y + 1 else if y <= 0 then ack (x - 1) 1 else ack (x - 1) (ack x (y - 1)) in print_int (ack 3 10)
LetRec "ack" (Var (Nothing)) [("x", Var (Nothing)), ("y", Var (Nothing))] (If (LE (Var "x") (Int 0)) (Add (Var "y") (Int 1)) (If (LE (Var "y") (Int 0)) (App (Var "ack") ([Sub (Var "x") (Int 1), Int 1])) (App (Var "ack") ([Sub (Var "x") (Int 1), App (Var "ack") ([Var "x", Sub (Var "y") (Int 1)])])))) (App (Var "print_int") ([App (Var "ack") ([Int 3, Int 10])]))
let rec make_adder x = let rec adder y = x + y in adder in print_int ((make_adder 3) 7)
LetRec "make_adder" (Var (Nothing)) [("x", Var (Nothing))] (LetRec "adder" (Var (Nothing)) [("y", Var (Nothing))] (Add (Var "x") (Var "y")) (Var "adder")) (App (Var "print_int") ([App (App (Var "make_adder") ([Int 3])) ([Int 7])]))
let rec f x = x + 123 in let rec g y = f in print_int ((g 456) 789)
LetRec "f" (Var (Nothing)) [("x", Var (Nothing))] (Add (Var "x") (Int 123)) (LetRec "g" (Var (Nothing)) [("y", Var (Nothing))] (Var "f") (App (Var "print_int") ([App (App (Var "g") ([Int 456])) ([Int 789])])))
let rec f n = if n < 0 then () else (print_int n; let a = Array.make 1 f in a.(0) (n - 1)) in f 9
LetRec "f" (Var (Nothing)) [("n", Var (Nothing))] (If (Not (LE (Int 0) (Var "n"))) (Unit) (Let "" (Unit) (App (Var "print_int") ([Var "n"])) (Let "a" (Var (Nothing)) (Array (Int 1) (Var "f")) (App (Get (Var "a") (Int 0)) ([Sub (Var "n") (Int 1)]))))) (App (Var "f") ([Int 9]))
let x = 10 in let rec f y = if y = 0 then 0 else x + f (y - 1) in print_int (f 123)
Let "x" (Var (Nothing)) (Int 10) (LetRec "f" (Var (Nothing)) [("y", Var (Nothing))] (If (Eq (Var "y") (Int 0)) (Int 0) (Add (Var "x") (App (Var "f") ([Sub (Var "y") (Int 1)])))) (App (Var "print_int") ([App (Var "f") ([Int 123])])))
let rec h p = let (v1,v2,v3,v4,v5,v6,v7,v8,v9,v10) = p in let rec g z = let r = v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8 + v9 + v10 in if z > 0 then r else g (-z) in g 1 in print_int (h (1,2,3,4,5,6,7,8,9,10)); print_newline ()
LetRec "h" (Var (Nothing)) [("p", Var (Nothing))] (LetTuple [("v1", Var (Nothing)), ("v2", Var (Nothing)), ("v3", Var (Nothing)), ("v4", Var (Nothing)), ("v5", Var (Nothing)), ("v6", Var (Nothing)), ("v7", Var (Nothing)), ("v8", Var (Nothing)), ("v9", Var (Nothing)), ("v10", Var (Nothing))] (Var "p") (LetRec "g" (Var (Nothing)) [("z", Var (Nothing))] (Let "r" (Var (Nothing)) (Add (Add (Add (Add (Add (Add (Add (Add (Add (Var "v1") (Var "v2")) (Var "v3")) (Var "v4")) (Var "v5")) (Var "v6")) (Var "v7")) (Var "v8")) (Var "v9")) (Var "v10")) (If (Not (LE (Var "z") (Int 0))) (Var "r") (App (Var "g") ([Neg (Var "z")])))) (App (Var "g") ([Int 1])))) (Let "" (Unit) (App (Var "print_int") ([App (Var "h") ([Tuple [Int 1, Int 2, Int 3, Int 4, Int 5, Int 6, Int 7, Int 8, Int 9, Int 10]])])) (App (Var "print_newline") ([Unit])))
let t = 123 in let f = 456 in let rec even x = let rec odd x = if x > 0 then even (x - 1) else if x < 0 then even (x + 1) else f in if x > 0 then odd (x - 1) else if x < 0 then odd (x + 1) else t in print_int (even 789)
Let "t" (Var (Nothing)) (Int 123) (Let "f" (Var (Nothing)) (Int 456) (LetRec "even" (Var (Nothing)) [("x", Var (Nothing))] (LetRec "odd" (Var (Nothing)) [("x", Var (Nothing))] (If (Not (LE (Var "x") (Int 0))) (App (Var "even") ([Sub (Var "x") (Int 1)])) (If (Not (LE (Int 0) (Var "x"))) (App (Var "even") ([Add (Var "x") (Int 1)])) (Var "f"))) (If (Not (LE (Var "x") (Int 0))) (App (Var "odd") ([Sub (Var "x") (Int 1)])) (If (Not (LE (Int 0) (Var "x"))) (App (Var "odd") ([Add (Var "x") (Int 1)])) (Var "t")))) (App (Var "print_int") ([App (Var "even") ([Int 789])]))))
let rec fib n = if n <= 1 then n else fib (n - 1) + fib (n - 2) in print_int (fib 30)
LetRec "fib" (Var (Nothing)) [("n", Var (Nothing))] (If (LE (Var "n") (Int 1)) (Var "n") (Add (App (Var "fib") ([Sub (Var "n") (Int 1)])) (App (Var "fib") ([Sub (Var "n") (Int 2)])))) (App (Var "print_int") ([App (Var "fib") ([Int 30])]))
print_int (int_of_float ((sin (cos (sqrt (abs_float (-12.3)))) +. 4.5 -. 6.7 *. 8.9 /. 1.2) *. float_of_int 1000000))
App (Var "print_int") ([App (Var "int_of_float") ([FMul (FSub (FAdd (App (Var "sin") ([App (Var "cos") ([App (Var "sqrt") ([App (Var "abs_float") ([Float -12.3])])])])) (Float 4.5)) (FDiv (FMul (Float 6.7) (Float 8.9)) (Float 1.2))) (App (Var "float_of_int") ([Int 1000000]))])])
let rec compose f g = let rec composed x = g (f x) in composed in let rec dbl x = x + x in let rec inc x = x + 1 in let rec dec x = x - 1 in let h = compose inc (compose dbl dec) in print_int (h 123)
LetRec "compose" (Var (Nothing)) [("f", Var (Nothing)), ("g", Var (Nothing))] (LetRec "composed" (Var (Nothing)) [("x", Var (Nothing))] (App (Var "g") ([App (Var "f") ([Var "x"])])) (Var "composed")) (LetRec "dbl" (Var (Nothing)) [("x", Var (Nothing))] (Add (Var "x") (Var "x")) (LetRec "inc" (Var (Nothing)) [("x", Var (Nothing))] (Add (Var "x") (Int 1)) (LetRec "dec" (Var (Nothing)) [("x", Var (Nothing))] (Sub (Var "x") (Int 1)) (Let "h" (Var (Nothing)) (App (Var "compose") ([Var "inc", App (Var "compose") ([Var "dbl", Var "dec"])])) (App (Var "print_int") ([App (Var "h") ([Int 123])]))))))
let rec gcd m n = if m = 0 then n else if m <= n then gcd m (n - m) else gcd n (m - n) in print_int (gcd 21600 337500)
LetRec "gcd" (Var (Nothing)) [("m", Var (Nothing)), ("n", Var (Nothing))] (If (Eq (Var "m") (Int 0)) (Var "n") (If (LE (Var "m") (Var "n")) (App (Var "gcd") ([Var "m", Sub (Var "n") (Var "m")])) (App (Var "gcd") ([Var "n", Sub (Var "m") (Var "n")])))) (App (Var "print_int") ([App (Var "gcd") ([Int 21600, Int 337500])]))
let rec inprod v1 v2 acc i = if i < 0 then acc else inprod v1 v2 (acc +. v1.(i) *. v2.(i)) (i - 1) in let v1 = Array.make 3 1.2 in let v2 = Array.make 3 4.5 in print_int (truncate (1000000. *. inprod v1 v2 0. 2))
LetRec "inprod" (Var (Nothing)) [("v1", Var (Nothing)), ("v2", Var (Nothing)), ("acc", Var (Nothing)), ("i", Var (Nothing))] (If (Not (LE (Int 0) (Var "i"))) (Var "acc") (App (Var "inprod") ([Var "v1", Var "v2", FAdd (Var "acc") (FMul (Get (Var "v1") (Var "i")) (Get (Var "v2") (Var "i"))), Sub (Var "i") (Int 1)]))) (Let "v1" (Var (Nothing)) (Array (Int 3) (Float 1.2)) (Let "v2" (Var (Nothing)) (Array (Int 3) (Float 4.5)) (App (Var "print_int") ([App (Var "truncate") ([FMul (Float 1000000.0) (App (Var "inprod") ([Var "v1", Var "v2", Float 0.0, Int 2]))])]))))
let rec inprod v1 v2 i = if i < 0 then 0.0 else v1.(i) *. v2.(i) +. inprod v1 v2 (i - 1) in let v1 = Array.make 3 1.2 in let v2 = Array.make 3 4.5 in print_int (truncate (1000000. *. inprod v1 v2 2))
LetRec "inprod" (Var (Nothing)) [("v1", Var (Nothing)), ("v2", Var (Nothing)), ("i", Var (Nothing))] (If (Not (LE (Int 0) (Var "i"))) (Float 0.0) (FAdd (FMul (Get (Var "v1") (Var "i")) (Get (Var "v2") (Var "i"))) (App (Var "inprod") ([Var "v1", Var "v2", Sub (Var "i") (Int 1)])))) (Let "v1" (Var (Nothing)) (Array (Int 3) (Float 1.2)) (Let "v2" (Var (Nothing)) (Array (Int 3) (Float 4.5)) (App (Var "print_int") ([App (Var "truncate") ([FMul (Float 1000000.0) (App (Var "inprod") ([Var "v1", Var "v2", Int 2]))])]))))
let rec getx v = (let (x, y, z) = v in x) in let rec gety v = (let (x, y, z) = v in y) in let rec getz v = (let (x, y, z) = v in z) in let rec inprod v1 v2 = getx v1 *. getx v2 +. gety v1 *. gety v2 +. getz v1 *. getz v2 in print_int (truncate (1000000. *. inprod (1., 2., 3.) (4., 5., 6.)))
LetRec "getx" (Var (Nothing)) [("v", Var (Nothing))] (LetTuple [("x", Var (Nothing)), ("y", Var (Nothing)), ("z", Var (Nothing))] (Var "v") (Var "x")) (LetRec "gety" (Var (Nothing)) [("v", Var (Nothing))] (LetTuple [("x", Var (Nothing)), ("y", Var (Nothing)), ("z", Var (Nothing))] (Var "v") (Var "y")) (LetRec "getz" (Var (Nothing)) [("v", Var (Nothing))] (LetTuple [("x", Var (Nothing)), ("y", Var (Nothing)), ("z", Var (Nothing))] (Var "v") (Var "z")) (LetRec "inprod" (Var (Nothing)) [("v1", Var (Nothing)), ("v2", Var (Nothing))] (FAdd (FAdd (FMul (App (Var "getx") ([Var "v1"])) (App (Var "getx") ([Var "v2"]))) (FMul (App (Var "gety") ([Var "v1"])) (App (Var "gety") ([Var "v2"])))) (FMul (App (Var "getz") ([Var "v1"])) (App (Var "getz") ([Var "v2"])))) (App (Var "print_int") ([App (Var "truncate") ([FMul (Float 1000000.0) (App (Var "inprod") ([Tuple [Float 1.0, Float 2.0, Float 3.0], Tuple [Float 4.0, Float 5.0, Float 6.0]]))])])))))
let rec f _ = 0 in 0
LetRec "f" (Var (Nothing)) [("", Var (Nothing))] (Int 0) (Int 0)
let rec f _ = 123 in let rec g _ = 456 in let rec h _ = 789 in let x = f () in let y = g () in print_int ((if h () = 0 then x - y else y - x) + x + y)
LetRec "f" (Var (Nothing)) [("", Var (Nothing))] (Int 123) (LetRec "g" (Var (Nothing)) [("", Var (Nothing))] (Int 456) (LetRec "h" (Var (Nothing)) [("", Var (Nothing))] (Int 789) (Let "x" (Var (Nothing)) (App (Var "f") ([Unit])) (Let "y" (Var (Nothing)) (App (Var "g") ([Unit])) (App (Var "print_int") ([Add (Add (If (Eq (App (Var "h") ([Unit])) (Int 0)) (Sub (Var "x") (Var "y")) (Sub (Var "y") (Var "x"))) (Var "x")) (Var "y")]))))))
let rec f _ = 123 in let rec g _ = 456 in let rec h _ = 789 in let x = f () in print_int ((if x <= 0 then g () + x else h () - x) + x)
LetRec "f" (Var (Nothing)) [("", Var (Nothing))] (Int 123) (LetRec "g" (Var (Nothing)) [("", Var (Nothing))] (Int 456) (LetRec "h" (Var (Nothing)) [("", Var (Nothing))] (Int 789) (Let "x" (Var (Nothing)) (App (Var "f") ([Unit])) (App (Var "print_int") ([Add (If (LE (Var "x") (Int 0)) (Add (App (Var "g") ([Unit])) (Var "x")) (Sub (App (Var "h") ([Unit])) (Var "x"))) (Var "x")])))))
let rec f _ = 123 in let rec g _ = 456 in let rec h _ = 789 in let x = f () in let y = g () in print_int ((if h () = 0 then x + 1 else y + 2) + x + y)
LetRec "f" (Var (Nothing)) [("", Var (Nothing))] (Int 123) (LetRec "g" (Var (Nothing)) [("", Var (Nothing))] (Int 456) (LetRec "h" (Var (Nothing)) [("", Var (Nothing))] (Int 789) (Let "x" (Var (Nothing)) (App (Var "f") ([Unit])) (Let "y" (Var (Nothing)) (App (Var "g") ([Unit])) (App (Var "print_int") ([Add (Add (If (Eq (App (Var "h") ([Unit])) (Int 0)) (Add (Var "x") (Int 1)) (Add (Var "y") (Int 2))) (Var "x")) (Var "y")]))))))
let rec f _ = 123 in let rec g _ = 456 in let x = f () in print_int ((if x <= 0 then g () + x else x) + x)
LetRec "f" (Var (Nothing)) [("", Var (Nothing))] (Int 123) (LetRec "g" (Var (Nothing)) [("", Var (Nothing))] (Int 456) (Let "x" (Var (Nothing)) (App (Var "f") ([Unit])) (App (Var "print_int") ([Add (If (LE (Var "x") (Int 0)) (Add (App (Var "g") ([Unit])) (Var "x")) (Var "x")) (Var "x")]))))
let rec f _ = 123 in let rec g _ = 456 in let rec h _ = 789 in let x = f () in print_int ((if x <= 0 then g () else h ()) + x)
LetRec "f" (Var (Nothing)) [("", Var (Nothing))] (Int 123) (LetRec "g" (Var (Nothing)) [("", Var (Nothing))] (Int 456) (LetRec "h" (Var (Nothing)) [("", Var (Nothing))] (Int 789) (Let "x" (Var (Nothing)) (App (Var "f") ([Unit])) (App (Var "print_int") ([Add (If (LE (Var "x") (Int 0)) (App (Var "g") ([Unit])) (App (Var "h") ([Unit]))) (Var "x")])))))
let rec loop3 i k j a b c = if k < 0 then () else (c.(i).(j) <- c.(i).(j) +. a.(i).(k) *. b.(k).(j); loop3 i (k - 1) j a b c) in let rec loop2 i m j a b c = if j < 0 then () else (loop3 i (m - 1) j a b c; loop2 i m (j - 1) a b c) in let rec loop1 i m n a b c = if i < 0 then () else (loop2 i m (n - 1) a b c; loop1 (i - 1) m n a b c) in let rec mul l m n a b c = loop1 (l - 1) m n a b c in let dummy = Array.make 0 0. in let rec init i n mat = if i < 0 then () else (mat.(i) <- Array.make n 0.; init (i - 1) n mat) in let rec make m n dummy = let mat = Array.make m dummy in init (m - 1) n mat; mat in let a = make 2 3 dummy in let b = make 3 2 dummy in let c = make 2 2 dummy in a.(0).(0) <- 1.; a.(0).(1) <- 2.; a.(0).(2) <- 3.; a.(1).(0) <- 4.; a.(1).(1) <- 5.; a.(1).(2) <- 6.; b.(0).(0) <- 7.; b.(0).(1) <- 8.; b.(1).(0) <- 9.; b.(1).(1) <- 10.; b.(2).(0) <- 11.; b.(2).(1) <- 12.; mul 2 3 2 a b c; print_int (truncate (c.(0).(0))); print_newline (); print_int (truncate (c.(0).(1))); print_newline (); print_int (truncate (c.(1).(0))); print_newline (); print_int (truncate (c.(1).(1))); print_newline ()
LetRec "loop3" (Var (Nothing)) [("i", Var (Nothing)), ("k", Var (Nothing)), ("j", Var (Nothing)), ("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing))] (If (Not (LE (Int 0) (Var "k"))) (Unit) (Let "" (Unit) (Put (Get (Var "c") (Var "i")) (Var "j") (FAdd (Get (Get (Var "c") (Var "i")) (Var "j")) (FMul (Get (Get (Var "a") (Var "i")) (Var "k")) (Get (Get (Var "b") (Var "k")) (Var "j"))))) (App (Var "loop3") ([Var "i", Sub (Var "k") (Int 1), Var "j", Var "a", Var "b", Var "c"])))) (LetRec "loop2" (Var (Nothing)) [("i", Var (Nothing)), ("m", Var (Nothing)), ("j", Var (Nothing)), ("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing))] (If (Not (LE (Int 0) (Var "j"))) (Unit) (Let "" (Unit) (App (Var "loop3") ([Var "i", Sub (Var "m") (Int 1), Var "j", Var "a", Var "b", Var "c"])) (App (Var "loop2") ([Var "i", Var "m", Sub (Var "j") (Int 1), Var "a", Var "b", Var "c"])))) (LetRec "loop1" (Var (Nothing)) [("i", Var (Nothing)), ("m", Var (Nothing)), ("n", Var (Nothing)), ("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing))] (If (Not (LE (Int 0) (Var "i"))) (Unit) (Let "" (Unit) (App (Var "loop2") ([Var "i", Var "m", Sub (Var "n") (Int 1), Var "a", Var "b", Var "c"])) (App (Var "loop1") ([Sub (Var "i") (Int 1), Var "m", Var "n", Var "a", Var "b", Var "c"])))) (LetRec "mul" (Var (Nothing)) [("l", Var (Nothing)), ("m", Var (Nothing)), ("n", Var (Nothing)), ("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing))] (App (Var "loop1") ([Sub (Var "l") (Int 1), Var "m", Var "n", Var "a", Var "b", Var "c"])) (Let "dummy" (Var (Nothing)) (Array (Int 0) (Float 0.0)) (LetRec "init" (Var (Nothing)) [("i", Var (Nothing)), ("n", Var (Nothing)), ("mat", Var (Nothing))] (If (Not (LE (Int 0) (Var "i"))) (Unit) (Let "" (Unit) (Put (Var "mat") (Var "i") (Array (Var "n") (Float 0.0))) (App (Var "init") ([Sub (Var "i") (Int 1), Var "n", Var "mat"])))) (LetRec "make" (Var (Nothing)) [("m", Var (Nothing)), ("n", Var (Nothing)), ("dummy", Var (Nothing))] (Let "mat" (Var (Nothing)) (Array (Var "m") (Var "dummy")) (Let "" (Unit) (App (Var "init") ([Sub (Var "m") (Int 1), Var "n", Var "mat"])) (Var "mat"))) (Let "a" (Var (Nothing)) (App (Var "make") ([Int 2, Int 3, Var "dummy"])) (Let "b" (Var (Nothing)) (App (Var "make") ([Int 3, Int 2, Var "dummy"])) (Let "c" (Var (Nothing)) (App (Var "make") ([Int 2, Int 2, Var "dummy"])) (Let "" (Unit) (Put (Get (Var "a") (Int 0)) (Int 0) (Float 1.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 0)) (Int 1) (Float 2.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 0)) (Int 2) (Float 3.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 1)) (Int 0) (Float 4.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 1)) (Int 1) (Float 5.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 1)) (Int 2) (Float 6.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 0)) (Int 0) (Float 7.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 0)) (Int 1) (Float 8.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 1)) (Int 0) (Float 9.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 1)) (Int 1) (Float 10.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 2)) (Int 0) (Float 11.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 2)) (Int 1) (Float 12.0)) (Let "" (Unit) (App (Var "mul") ([Int 2, Int 3, Int 2, Var "a", Var "b", Var "c"])) (Let "" (Unit) (App (Var "print_int") ([App (Var "truncate") ([Get (Get (Var "c") (Int 0)) (Int 0)])])) (Let "" (Unit) (App (Var "print_newline") ([Unit])) (Let "" (Unit) (App (Var "print_int") ([App (Var "truncate") ([Get (Get (Var "c") (Int 0)) (Int 1)])])) (Let "" (Unit) (App (Var "print_newline") ([Unit])) (Let "" (Unit) (App (Var "print_int") ([App (Var "truncate") ([Get (Get (Var "c") (Int 1)) (Int 0)])])) (Let "" (Unit) (App (Var "print_newline") ([Unit])) (Let "" (Unit) (App (Var "print_int") ([App (Var "truncate") ([Get (Get (Var "c") (Int 1)) (Int 1)])])) (App (Var "print_newline") ([Unit])))))))))))))))))))))))))))))))
if () then () else let x = () in ()
If (Unit) (Unit) (Let "x" (Var (Nothing)) (Unit) (Unit))
let rec mul l m n a b c = let rec loop1 i = if i < 0 then () else let rec loop2 j = if j < 0 then () else let rec loop3 k = if k < 0 then () else (c.(i).(j) <- c.(i).(j) +. a.(i).(k) *. b.(k).(j); loop3 (k - 1)) in loop3 (m - 1); loop2 (j - 1) in loop2 (n - 1); loop1 (i - 1) in loop1 (l - 1) in let dummy = Array.make 0 0. in let rec make m n = let mat = Array.make m dummy in let rec init i = if i < 0 then () else (mat.(i) <- Array.make n 0.; init (i - 1)) in init (m - 1); mat in let a = make 2 3 in let b = make 3 2 in let c = make 2 2 in a.(0).(0) <- 1.; a.(0).(1) <- 2.; a.(0).(2) <- 3.; a.(1).(0) <- 4.; a.(1).(1) <- 5.; a.(1).(2) <- 6.; b.(0).(0) <- 7.; b.(0).(1) <- 8.; b.(1).(0) <- 9.; b.(1).(1) <- 10.; b.(2).(0) <- 11.; b.(2).(1) <- 12.; mul 2 3 2 a b c; print_int (truncate (c.(0).(0))); print_newline (); print_int (truncate (c.(0).(1))); print_newline (); print_int (truncate (c.(1).(0))); print_newline (); print_int (truncate (c.(1).(1))); print_newline ()
LetRec "mul" (Var (Nothing)) [("l", Var (Nothing)), ("m", Var (Nothing)), ("n", Var (Nothing)), ("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing))] (LetRec "loop1" (Var (Nothing)) [("i", Var (Nothing))] (If (Not (LE (Int 0) (Var "i"))) (Unit) (LetRec "loop2" (Var (Nothing)) [("j", Var (Nothing))] (If (Not (LE (Int 0) (Var "j"))) (Unit) (LetRec "loop3" (Var (Nothing)) [("k", Var (Nothing))] (If (Not (LE (Int 0) (Var "k"))) (Unit) (Let "" (Unit) (Put (Get (Var "c") (Var "i")) (Var "j") (FAdd (Get (Get (Var "c") (Var "i")) (Var "j")) (FMul (Get (Get (Var "a") (Var "i")) (Var "k")) (Get (Get (Var "b") (Var "k")) (Var "j"))))) (App (Var "loop3") ([Sub (Var "k") (Int 1)])))) (Let "" (Unit) (App (Var "loop3") ([Sub (Var "m") (Int 1)])) (App (Var "loop2") ([Sub (Var "j") (Int 1)]))))) (Let "" (Unit) (App (Var "loop2") ([Sub (Var "n") (Int 1)])) (App (Var "loop1") ([Sub (Var "i") (Int 1)]))))) (App (Var "loop1") ([Sub (Var "l") (Int 1)]))) (Let "dummy" (Var (Nothing)) (Array (Int 0) (Float 0.0)) (LetRec "make" (Var (Nothing)) [("m", Var (Nothing)), ("n", Var (Nothing))] (Let "mat" (Var (Nothing)) (Array (Var "m") (Var "dummy")) (LetRec "init" (Var (Nothing)) [("i", Var (Nothing))] (If (Not (LE (Int 0) (Var "i"))) (Unit) (Let "" (Unit) (Put (Var "mat") (Var "i") (Array (Var "n") (Float 0.0))) (App (Var "init") ([Sub (Var "i") (Int 1)])))) (Let "" (Unit) (App (Var "init") ([Sub (Var "m") (Int 1)])) (Var "mat")))) (Let "a" (Var (Nothing)) (App (Var "make") ([Int 2, Int 3])) (Let "b" (Var (Nothing)) (App (Var "make") ([Int 3, Int 2])) (Let "c" (Var (Nothing)) (App (Var "make") ([Int 2, Int 2])) (Let "" (Unit) (Put (Get (Var "a") (Int 0)) (Int 0) (Float 1.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 0)) (Int 1) (Float 2.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 0)) (Int 2) (Float 3.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 1)) (Int 0) (Float 4.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 1)) (Int 1) (Float 5.0)) (Let "" (Unit) (Put (Get (Var "a") (Int 1)) (Int 2) (Float 6.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 0)) (Int 0) (Float 7.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 0)) (Int 1) (Float 8.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 1)) (Int 0) (Float 9.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 1)) (Int 1) (Float 10.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 2)) (Int 0) (Float 11.0)) (Let "" (Unit) (Put (Get (Var "b") (Int 2)) (Int 1) (Float 12.0)) (Let "" (Unit) (App (Var "mul") ([Int 2, Int 3, Int 2, Var "a", Var "b", Var "c"])) (Let "" (Unit) (App (Var "print_int") ([App (Var "truncate") ([Get (Get (Var "c") (Int 0)) (Int 0)])])) (Let "" (Unit) (App (Var "print_newline") ([Unit])) (Let "" (Unit) (App (Var "print_int") ([App (Var "truncate") ([Get (Get (Var "c") (Int 0)) (Int 1)])])) (Let "" (Unit) (App (Var "print_newline") ([Unit])) (Let "" (Unit) (App (Var "print_int") ([App (Var "truncate") ([Get (Get (Var "c") (Int 1)) (Int 0)])])) (Let "" (Unit) (App (Var "print_newline") ([Unit])) (Let "" (Unit) (App (Var "print_int") ([App (Var "truncate") ([Get (Get (Var "c") (Int 1)) (Int 1)])])) (App (Var "print_newline") ([Unit])))))))))))))))))))))))))))
print_int (if z < 0 then y else x)
App (Var "print_int") ([If (Not (LE (Int 0) (Var "z"))) (Var "y") (Var "x")])
print_int ((if z < 0 then y else x) + (if x > 0 then z else y) + (if y < 0 then x else z))
App (Var "print_int") ([Add (Add (If (Not (LE (Int 0) (Var "z"))) (Var "y") (Var "x")) (If (Not (LE (Var "x") (Int 0))) (Var "z") (Var "y"))) (If (Not (LE (Int 0) (Var "y"))) (Var "x") (Var "z"))])
let z = truncate (-.7.8) in print_int ((if z < 0 then y else x) + (if x > 0 then z else y) + (if y < 0 then x else z))
Let "z" (Var (Nothing)) (App (Var "truncate") ([FNeg (Float 7.8)])) (App (Var "print_int") ([Add (Add (If (Not (LE (Int 0) (Var "z"))) (Var "y") (Var "x")) (If (Not (LE (Var "x") (Int 0))) (Var "z") (Var "y"))) (If (Not (LE (Int 0) (Var "y"))) (Var "x") (Var "z"))]))
let x = truncate 1.2 in let y = truncate 4.5 in let z = truncate (-.7.8) in print_int ((if z < 0 then y else x) + (if x > 0 then z else y) + (if y < 0 then x else z))
Let "x" (Var (Nothing)) (App (Var "truncate") ([Float 1.2])) (Let "y" (Var (Nothing)) (App (Var "truncate") ([Float 4.5])) (Let "z" (Var (Nothing)) (App (Var "truncate") ([FNeg (Float 7.8)])) (App (Var "print_int") ([Add (Add (If (Not (LE (Int 0) (Var "z"))) (Var "y") (Var "x")) (If (Not (LE (Var "x") (Int 0))) (Var "z") (Var "y"))) (If (Not (LE (Int 0) (Var "y"))) (Var "x") (Var "z"))]))))
let rec f _ = 12345 in let y = Array.make 10 3 in let x = 67890 in print_int (if y.(0) = 3 then f () + y.(1) + x else 7)
LetRec "f" (Var (Nothing)) [("", Var (Nothing))] (Int 12345) (Let "y" (Var (Nothing)) (Array (Int 10) (Int 3)) (Let "x" (Var (Nothing)) (Int 67890) (App (Var "print_int") ([If (Eq (Get (Var "y") (Int 0)) (Int 3)) (Add (Add (App (Var "f") ([Unit])) (Get (Var "y") (Int 1))) (Var "x")) (Int 7)]))))
print_int 123; print_int (-456); print_int (789+0)
Let "" (Unit) (App (Var "print_int") ([Int 123])) (Let "" (Unit) (App (Var "print_int") ([Neg (Int 456)])) (App (Var "print_int") ([Add (Int 789) (Int 0)])))
let rec foo a b c d e f = print_int a; print_int b; print_int c; print_int d; print_int e; print_int f in let rec bar a b c d e f = foo b a d e f c in bar 1 2 3 4 5 6
LetRec "foo" (Var (Nothing)) [("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing)), ("d", Var (Nothing)), ("e", Var (Nothing)), ("f", Var (Nothing))] (Let "" (Unit) (App (Var "print_int") ([Var "a"])) (Let "" (Unit) (App (Var "print_int") ([Var "b"])) (Let "" (Unit) (App (Var "print_int") ([Var "c"])) (Let "" (Unit) (App (Var "print_int") ([Var "d"])) (Let "" (Unit) (App (Var "print_int") ([Var "e"])) (App (Var "print_int") ([Var "f"]))))))) (LetRec "bar" (Var (Nothing)) [("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing)), ("d", Var (Nothing)), ("e", Var (Nothing)), ("f", Var (Nothing))] (App (Var "foo") ([Var "b", Var "a", Var "d", Var "e", Var "f", Var "c"])) (App (Var "bar") ([Int 1, Int 2, Int 3, Int 4, Int 5, Int 6])))
let rec f a b c d = let e = a + b in let f = a + c in let g = a + d in let h = b + c in let i = b + d in let j = c + d in let k = e + f in let l = e + g in let m = e + h in let n = e + i in let o = e + j in let p = f + g in let q = f + h in let r = f + i in let s = f + j in let t = g + h in let u = g + i in let v = g + j in let w = h + i in let x = h + j in let y = i + j in let aa = k + l in let ab = k + m in let ac = k + n in let ad = k + o in let ae = k + p in let af = k + q in let ag = k + r in let ah = k + s in let ai = k + t in let aj = k + u in let ak = k + v in let al = k + w in let am = k + x in let an = k + y in let z = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + aa + ab + ac + ad + ae + af + ag + ah + ai + aj + ak + al + am + an in -z in print_int (f 1 2 3 4)
LetRec "f" (Var (Nothing)) [("a", Var (Nothing)), ("b", Var (Nothing)), ("c", Var (Nothing)), ("d", Var (Nothing))] (Let "e" (Var (Nothing)) (Add (Var "a") (Var "b")) (Let "f" (Var (Nothing)) (Add (Var "a") (Var "c")) (Let "g" (Var (Nothing)) (Add (Var "a") (Var "d")) (Let "h" (Var (Nothing)) (Add (Var "b") (Var "c")) (Let "i" (Var (Nothing)) (Add (Var "b") (Var "d")) (Let "j" (Var (Nothing)) (Add (Var "c") (Var "d")) (Let "k" (Var (Nothing)) (Add (Var "e") (Var "f")) (Let "l" (Var (Nothing)) (Add (Var "e") (Var "g")) (Let "m" (Var (Nothing)) (Add (Var "e") (Var "h")) (Let "n" (Var (Nothing)) (Add (Var "e") (Var "i")) (Let "o" (Var (Nothing)) (Add (Var "e") (Var "j")) (Let "p" (Var (Nothing)) (Add (Var "f") (Var "g")) (Let "q" (Var (Nothing)) (Add (Var "f") (Var "h")) (Let "r" (Var (Nothing)) (Add (Var "f") (Var "i")) (Let "s" (Var (Nothing)) (Add (Var "f") (Var "j")) (Let "t" (Var (Nothing)) (Add (Var "g") (Var "h")) (Let "u" (Var (Nothing)) (Add (Var "g") (Var "i")) (Let "v" (Var (Nothing)) (Add (Var "g") (Var "j")) (Let "w" (Var (Nothing)) (Add (Var "h") (Var "i")) (Let "x" (Var (Nothing)) (Add (Var "h") (Var "j")) (Let "y" (Var (Nothing)) (Add (Var "i") (Var "j")) (Let "aa" (Var (Nothing)) (Add (Var "k") (Var "l")) (Let "ab" (Var (Nothing)) (Add (Var "k") (Var "m")) (Let "ac" (Var (Nothing)) (Add (Var "k") (Var "n")) (Let "ad" (Var (Nothing)) (Add (Var "k") (Var "o")) (Let "ae" (Var (Nothing)) (Add (Var "k") (Var "p")) (Let "af" (Var (Nothing)) (Add (Var "k") (Var "q")) (Let "ag" (Var (Nothing)) (Add (Var "k") (Var "r")) (Let "ah" (Var (Nothing)) (Add (Var "k") (Var "s")) (Let "ai" (Var (Nothing)) (Add (Var "k") (Var "t")) (Let "aj" (Var (Nothing)) (Add (Var "k") (Var "u")) (Let "ak" (Var (Nothing)) (Add (Var "k") (Var "v")) (Let "al" (Var (Nothing)) (Add (Var "k") (Var "w")) (Let "am" (Var (Nothing)) (Add (Var "k") (Var "x")) (Let "an" (Var (Nothing)) (Add (Var "k") (Var "y")) (Let "z" (Var (Nothing)) (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Var "a") (Var "b")) (Var "c")) (Var "d")) (Var "e")) (Var "f")) (Var "g")) (Var "h")) (Var "i")) (Var "j")) (Var "k")) (Var "l")) (Var "m")) (Var "n")) (Var "o")) (Var "p")) (Var "q")) (Var "r")) (Var "s")) (Var "t")) (Var "u")) (Var "v")) (Var "w")) (Var "x")) (Var "y")) (Var "aa")) (Var "ab")) (Var "ac")) (Var "ad")) (Var "ae")) (Var "af")) (Var "ag")) (Var "ah")) (Var "ai")) (Var "aj")) (Var "ak")) (Var "al")) (Var "am")) (Var "an")) (Neg (Var "z")))))))))))))))))))))))))))))))))))))) (App (Var "print_int") ([App (Var "f") ([Int 1, Int 2, Int 3, Int 4])]))
let rec f _ = 12345 in let rec g y = y + 1 in let z = Array.make 10 1 in let x = f () in let y = 67890 in let z0 = z.(0) in let z1 = z0 + z0 in let z2 = z1 + z1 in let z3 = z2 + z2 in let z4 = z3 + z3 in let z5 = z4 + z4 in let z6 = z5 + z5 in let z7 = z6 + z6 in let z8 = z7 + z7 in let z9 = z8 + z8 in let z10 = z9 + z9 in let z11 = z10 + z10 in let z12 = z11 + z11 in let z13 = z12 + z12 in let z14 = z13 + z13 in let z15 = z14 + z14 in print_int (if z.(1) = 0 then g y else z0 + z1 + z2 + z3 + z4 + z5 + z6 + z7 + z8 + z9 + z10 + z11 + z12 + z13 + z14 + z15 + x)
LetRec "f" (Var (Nothing)) [("", Var (Nothing))] (Int 12345) (LetRec "g" (Var (Nothing)) [("y", Var (Nothing))] (Add (Var "y") (Int 1)) (Let "z" (Var (Nothing)) (Array (Int 10) (Int 1)) (Let "x" (Var (Nothing)) (App (Var "f") ([Unit])) (Let "y" (Var (Nothing)) (Int 67890) (Let "z0" (Var (Nothing)) (Get (Var "z") (Int 0)) (Let "z1" (Var (Nothing)) (Add (Var "z0") (Var "z0")) (Let "z2" (Var (Nothing)) (Add (Var "z1") (Var "z1")) (Let "z3" (Var (Nothing)) (Add (Var "z2") (Var "z2")) (Let "z4" (Var (Nothing)) (Add (Var "z3") (Var "z3")) (Let "z5" (Var (Nothing)) (Add (Var "z4") (Var "z4")) (Let "z6" (Var (Nothing)) (Add (Var "z5") (Var "z5")) (Let "z7" (Var (Nothing)) (Add (Var "z6") (Var "z6")) (Let "z8" (Var (Nothing)) (Add (Var "z7") (Var "z7")) (Let "z9" (Var (Nothing)) (Add (Var "z8") (Var "z8")) (Let "z10" (Var (Nothing)) (Add (Var "z9") (Var "z9")) (Let "z11" (Var (Nothing)) (Add (Var "z10") (Var "z10")) (Let "z12" (Var (Nothing)) (Add (Var "z11") (Var "z11")) (Let "z13" (Var (Nothing)) (Add (Var "z12") (Var "z12")) (Let "z14" (Var (Nothing)) (Add (Var "z13") (Var "z13")) (Let "z15" (Var (Nothing)) (Add (Var "z14") (Var "z14")) (App (Var "print_int") ([If (Eq (Get (Var "z") (Int 1)) (Int 0)) (App (Var "g") ([Var "y"])) (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Var "z0") (Var "z1")) (Var "z2")) (Var "z3")) (Var "z4")) (Var "z5")) (Var "z6")) (Var "z7")) (Var "z8")) (Var "z9")) (Var "z10")) (Var "z11")) (Var "z12")) (Var "z13")) (Var "z14")) (Var "z15")) (Var "x"))]))))))))))))))))))))))
let rec f x0 = let x1 = x0 + 1 in let x2 = x1 + 1 in let x3 = x2 + 1 in let x4 = x3 + 1 in let x5 = x4 + 1 in let x6 = x5 + 1 in let x7 = x6 + 1 in let x8 = x7 + 1 in let x9 = x8 + 1 in let x10 = x9 + 1 in let x11 = x10 + 1 in let x12 = x11 + 1 in let x13 = x12 + 1 in let x14 = x13 + 1 in let x15 = x14 + 1 in let x16 = x15 + 1 in let x17 = x16 + 1 in let x18 = x17 + 1 in let x19 = x18 + x1 in let x20 = x19 + x2 in let x21 = x20 + x3 in let x22 = x21 + x4 in let x23 = x22 + x5 in let x24 = x23 + x6 in let x25 = x24 + x7 in let x26 = x25 + x8 in let x27 = x26 + x9 in let x28 = x27 + x10 in let x29 = x28 + x11 in let x30 = x29 + x12 in let x31 = x30 + x13 in let x32 = x31 + x14 in let x33 = x32 + x15 in let x34 = x33 + x16 in let x35 = x34 + x17 in let x36 = x35 + x0 in x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30 + x31 + x32 + x33 + x34 + x35 + x36 + x0 in print_int (f 0)
LetRec "f" (Var (Nothing)) [("x0", Var (Nothing))] (Let "x1" (Var (Nothing)) (Add (Var "x0") (Int 1)) (Let "x2" (Var (Nothing)) (Add (Var "x1") (Int 1)) (Let "x3" (Var (Nothing)) (Add (Var "x2") (Int 1)) (Let "x4" (Var (Nothing)) (Add (Var "x3") (Int 1)) (Let "x5" (Var (Nothing)) (Add (Var "x4") (Int 1)) (Let "x6" (Var (Nothing)) (Add (Var "x5") (Int 1)) (Let "x7" (Var (Nothing)) (Add (Var "x6") (Int 1)) (Let "x8" (Var (Nothing)) (Add (Var "x7") (Int 1)) (Let "x9" (Var (Nothing)) (Add (Var "x8") (Int 1)) (Let "x10" (Var (Nothing)) (Add (Var "x9") (Int 1)) (Let "x11" (Var (Nothing)) (Add (Var "x10") (Int 1)) (Let "x12" (Var (Nothing)) (Add (Var "x11") (Int 1)) (Let "x13" (Var (Nothing)) (Add (Var "x12") (Int 1)) (Let "x14" (Var (Nothing)) (Add (Var "x13") (Int 1)) (Let "x15" (Var (Nothing)) (Add (Var "x14") (Int 1)) (Let "x16" (Var (Nothing)) (Add (Var "x15") (Int 1)) (Let "x17" (Var (Nothing)) (Add (Var "x16") (Int 1)) (Let "x18" (Var (Nothing)) (Add (Var "x17") (Int 1)) (Let "x19" (Var (Nothing)) (Add (Var "x18") (Var "x1")) (Let "x20" (Var (Nothing)) (Add (Var "x19") (Var "x2")) (Let "x21" (Var (Nothing)) (Add (Var "x20") (Var "x3")) (Let "x22" (Var (Nothing)) (Add (Var "x21") (Var "x4")) (Let "x23" (Var (Nothing)) (Add (Var "x22") (Var "x5")) (Let "x24" (Var (Nothing)) (Add (Var "x23") (Var "x6")) (Let "x25" (Var (Nothing)) (Add (Var "x24") (Var "x7")) (Let "x26" (Var (Nothing)) (Add (Var "x25") (Var "x8")) (Let "x27" (Var (Nothing)) (Add (Var "x26") (Var "x9")) (Let "x28" (Var (Nothing)) (Add (Var "x27") (Var "x10")) (Let "x29" (Var (Nothing)) (Add (Var "x28") (Var "x11")) (Let "x30" (Var (Nothing)) (Add (Var "x29") (Var "x12")) (Let "x31" (Var (Nothing)) (Add (Var "x30") (Var "x13")) (Let "x32" (Var (Nothing)) (Add (Var "x31") (Var "x14")) (Let "x33" (Var (Nothing)) (Add (Var "x32") (Var "x15")) (Let "x34" (Var (Nothing)) (Add (Var "x33") (Var "x16")) (Let "x35" (Var (Nothing)) (Add (Var "x34") (Var "x17")) (Let "x36" (Var (Nothing)) (Add (Var "x35") (Var "x0")) (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Add (Var "x1") (Var "x2")) (Var "x3")) (Var "x4")) (Var "x5")) (Var "x6")) (Var "x7")) (Var "x8")) (Var "x9")) (Var "x10")) (Var "x11")) (Var "x12")) (Var "x13")) (Var "x14")) (Var "x15")) (Var "x16")) (Var "x17")) (Var "x18")) (Var "x19")) (Var "x20")) (Var "x21")) (Var "x22")) (Var "x23")) (Var "x24")) (Var "x25")) (Var "x26")) (Var "x27")) (Var "x28")) (Var "x29")) (Var "x30")) (Var "x31")) (Var "x32")) (Var "x33")) (Var "x34")) (Var "x35")) (Var "x36")) (Var "x0")))))))))))))))))))))))))))))))))))))) (App (Var "print_int") ([App (Var "f") ([Int 0])]))
let rec sum acc x = if x <= 0 then acc else sum (acc + x) (x - 1) in print_int (sum 0 10000)
LetRec "sum" (Var (Nothing)) [("acc", Var (Nothing)), ("x", Var (Nothing))] (If (LE (Var "x") (Int 0)) (Var "acc") (App (Var "sum") ([Add (Var "acc") (Var "x"), Sub (Var "x") (Int 1)]))) (App (Var "print_int") ([App (Var "sum") ([Int 0, Int 10000])]))
let rec sum x = if x <= 0 then 0 else sum (x - 1) + x in print_int (sum 10000)
LetRec "sum" (Var (Nothing)) [("x", Var (Nothing))] (If (LE (Var "x") (Int 0)) (Int 0) (Add (App (Var "sum") ([Sub (Var "x") (Int 1)])) (Var "x"))) (App (Var "print_int") ([App (Var "sum") ([Int 10000])]))
%
