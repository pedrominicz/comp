#!/usr/bin/env bash

make || exit 1

trap clean 0 1 2 3 6

clean() {
  rm -f tmp{,.s,.o}
}

assert() {
  expected="$1"
  input="$2"

  ./m "$input" >tmp.s || exit 1
  gcc -static -o tmp tmp.s || exit 1
  ./tmp
  actual="$?"

  if [ "$actual" -ne "$expected" ]; then
    echo "expected $expected, but got $actual ('$input')" >&2
    exit 1
  fi
}

assert 0 '{ return 0; }'
assert 40 '{ return 40; }'
assert 20 '{ return 5+19-4; }'
assert 40 '{ return 12 + 33 - 5 ; }'
assert 46 '{ return 4 + 6 * 7; }'
assert 15 '{ return 5 * (9 - 6); }'
assert 4 '{ return (3 + 5) / 2; }'
assert 10 '{ return -10 + 20; }'
assert 10 '{ return - -10; }'
assert 10 '{ return - -+10; }'

assert 0 '{ return 0==1; }'
assert 1 '{ return 42==42; }'
assert 1 '{ return 0!=1; }'
assert 0 '{ return 42!=42; }'

assert 1 '{ return !0==1; }'
assert 1 '{ return !!0==0; }'
assert 1 '{ return !!1==1; }'

assert 1 '{ return 0<1; }'
assert 0 '{ return 1<1; }'
assert 0 '{ return 2<1; }'
assert 1 '{ return 0<=1; }'
assert 1 '{ return 1<=1; }'
assert 0 '{ return 2<=1; }'

assert 1 '{ return 1>0; }'
assert 0 '{ return 1>1; }'
assert 0 '{ return 1>2; }'
assert 1 '{ return 1>=0; }'
assert 1 '{ return 1>=1; }'
assert 0 '{ return 1>=2; }'

assert 3 '{ let a = 3; return a; }'
assert 8 '{ let a = 3; let z = 5; return a + z; }'
assert 6 '{ let a = 0; let b = 0; a = (b = 3); return a + b; }'
assert 6 '{ let b = 0; let a = (b = 3); return a + b; }'
assert 3 '{ let foo = 3; foo; }'
assert 8 '{ let foo123 = 3; let bar = 5; return foo123 + bar; }'

assert 1 '{ return 1; 2; 3; }'
assert 2 '{ 1; return 2; 3; }'
assert 3 '{ 1; 2; return 3; }'

assert 1 '{ { return 1; { 2; } 3; } }'
assert 2 '{ { 1; { return 2; } 3; } }'
assert 3 '{ { 1; { 2; } return 3; } }'

assert 0 '{}'
assert 0 '{ ; }'
assert 5 '{ ;;; return 5; }'

assert 3 '{ if (0) return 2; return 3; }'
assert 3 '{ if (1 - 1) return 2; return 3; }'
assert 2 '{ if (1) return 2; return 3; }'
assert 2 '{ if (2 - 1) return 2; return 3; }'
assert 4 '{ if (0) { 1; 2; return 3; } else { return 4; } }'
assert 3 '{ if (1) { 1; 2; return 3; } else { return 4; } }'

assert 55 '{ let i = 0; let j = 0; for (i = 0; i <= 10; i = i + 1) j = i + j; return j; }'
assert 55 '{ let j = 0; for (let i = 0; i <= 10; i = i + 1) j = i + j; return j; }'
assert 3 '{ for (;;) { return 3; } return 5; }'
assert 10 '{ let i = 0; while (i < 10) { i = i + 1; } return i; }'
assert 10 '{ let i = 0; while (i < 10) i = i + 1; return i; }'

assert 3 '{ let x = 3; return *&x; }'
assert 3 '{ let x = 3; let y = &x; let z = &y; return **z; }'
assert 5 '{ let x = 3; let y = 5; return *(&x + 1); }'
assert 3 '{ let x = 3; let y = 5; return *(&y - 1); }'
assert 5 '{ let x = 3; let y = 5; return *(&x - (-1)); }'
assert 5 '{ let x = 3; let y = &x; *y = 5; return x; }'
assert 7 '{ let x = 3; let y = 5; *(&x + 1) = 7; return y; }'
assert 7 '{ let x = 3; let y = 5; *(&y - 2 + 1) = 7; return x; }'
assert 7 '{ let x = 3; let y = 5; *(&y - 1) = 7; return x; }'
assert 5 '{ let x = 3; return (&x + 2) - &x + 3; }'

assert 1 '{ let x = 0; let y = 0; return &y - &x; }'
assert 3 '{ let x = 2; let y = 3; return *(&x + (&y - &x)); }'

echo 'OK'
