#!/usr/bin/env bash

make || exit 1

trap clean 0 1 2 3 6

clean() {
  rm -f tmp{,.s,{,2}.o}
}

cat <<EOF |gcc -x c -c -o tmp2.o -
int ret3() { return 3; }
int ret5() { return 5; }

int add(int x, int y) { return x + y; }
int sub(int x, int y) { return x - y; }

int add6(int a, int b, int c, int d, int e, int f) {
  return a + b + c + d + e + f;
}
EOF

assert() {
  expected="$1"
  input="$2"

  ./m "$input" >tmp.s || exit 1
  gcc -static -o tmp tmp.s tmp2.o || exit 1
  ./tmp
  actual="$?"

  if [ "$actual" -ne "$expected" ]; then
    echo "expected $expected, but got $actual ('$input')" >&2
    exit 1
  fi
}

assert 0 'fn main() { return 0; }'
assert 40 'fn main() { return 40; }'
assert 20 'fn main() { return 5+19-4; }'
assert 40 'fn main() { return 12 + 33 - 5 ; }'
assert 46 'fn main() { return 4 + 6 * 7; }'
assert 15 'fn main() { return 5 * (9 - 6); }'
assert 4 'fn main() { return (3 + 5) / 2; }'
assert 10 'fn main() { return -10 + 20; }'
assert 10 'fn main() { return - -10; }'
assert 10 'fn main() { return - -+10; }'

assert 0 'fn main() { return 0==1; }'
assert 1 'fn main() { return 42==42; }'
assert 1 'fn main() { return 0!=1; }'
assert 0 'fn main() { return 42!=42; }'

assert 1 'fn main() { return !0==1; }'
assert 1 'fn main() { return !!0==0; }'
assert 1 'fn main() { return !!1==1; }'

assert 1 'fn main() { return 0<1; }'
assert 0 'fn main() { return 1<1; }'
assert 0 'fn main() { return 2<1; }'
assert 1 'fn main() { return 0<=1; }'
assert 1 'fn main() { return 1<=1; }'
assert 0 'fn main() { return 2<=1; }'

assert 1 'fn main() { return 1>0; }'
assert 0 'fn main() { return 1>1; }'
assert 0 'fn main() { return 1>2; }'
assert 1 'fn main() { return 1>=0; }'
assert 1 'fn main() { return 1>=1; }'
assert 0 'fn main() { return 1>=2; }'

assert 3 'fn main() { let a = 3; return a; }'
assert 8 'fn main() { let a = 3; let z = 5; return a + z; }'
assert 6 'fn main() { let a = 0; let b = 0; a = 3; b = a; return a + b; }'
assert 6 'fn main() { let a = 0; a = 3; let b = a; return a + b; }'
assert 3 'fn main() { let foo = 3; foo; }'
assert 8 'fn main() { let foo123 = 3; let bar = 5; return foo123 + bar; }'

assert 1 'fn main() { return 1; 2; 3; }'
assert 2 'fn main() { 1; return 2; 3; }'
assert 3 'fn main() { 1; 2; return 3; }'

assert 1 'fn main() { { return 1; { 2; } 3; } }'
assert 2 'fn main() { { 1; { return 2; } 3; } }'
assert 3 'fn main() { { 1; { 2; } return 3; } }'

assert 0 'fn main() {}'
assert 0 'fn main() { ; }'
assert 5 'fn main() { ;;; return 5; }'

assert 3 'fn main() { if (0) return 2; return 3; }'
assert 3 'fn main() { if (1 - 1) return 2; return 3; }'
assert 2 'fn main() { if (1) return 2; return 3; }'
assert 2 'fn main() { if (2 - 1) return 2; return 3; }'
assert 4 'fn main() { if (0) { 1; 2; return 3; } else { return 4; } }'
assert 3 'fn main() { if (1) { 1; 2; return 3; } else { return 4; } }'

assert 55 'fn main() { let i = 0; let j = 0; for (i = 0; i <= 10; i = i + 1) j = i + j; return j; }'
assert 55 'fn main() { let j = 0; for (let i = 0; i <= 10; i = i + 1) j = i + j; return j; }'
assert 3 'fn main() { for (;;) { return 3; } return 5; }'
assert 10 'fn main() { let i = 0; while (i < 10) { i = i + 1; } return i; }'
assert 10 'fn main() { let i = 0; while (i < 10) i = i + 1; return i; }'

assert 3 'fn main() { let x = 3; return *&x; }'
assert 3 'fn main() { let x = 3; let y = &x; let z = &y; return **z; }'
assert 5 'fn main() { let x = 3; let y = 5; return *(&x + 1); }'
assert 3 'fn main() { let x = 3; let y = 5; return *(&y - 1); }'
assert 5 'fn main() { let x = 3; let y = 5; return *(&x - (-1)); }'
#assert 5 'fn main() { let x = 3; let y = &x; *y = 5; return x; }'
#assert 7 'fn main() { let x = 3; let y = 5; *(&x + 1) = 7; return y; }'
#assert 7 'fn main() { let x = 3; let y = 5; *(&y - 2 + 1) = 7; return x; }'
#assert 7 'fn main() { let x = 3; let y = 5; *(&y - 1) = 7; return x; }'
assert 5 'fn main() { let x = 3; return (&x + 2) - &x + 3; }'

assert 1 'fn main() { let x = 0; let y = 0; return &y - &x; }'
assert 3 'fn main() { let x = 2; let y = 3; return *(&x + (&y - &x)); }'

assert 3 'fn main() { let a = 1; let a = 2; let a = 3; return a; }'
assert 3 'fn main() { let a = 1; let a = a + 1; let a = a + 1; return a; }'

assert 3 'fn main() { return ret3(); }'
assert 5 'fn main() { return ret5(); }'
assert 3 'fn main() { let a = 0; return ret3(); }'
assert 3 'fn main() { let a = 0; let b = 0; return ret3(); }'
assert 3 'fn main() { let a = 0; let b = 0; let c = 0; return ret3(); }'
assert 8 'fn main() { return add(3, 5); }'
assert 2 'fn main() { return sub(5, 3); }'
assert 21 'fn main() { return add6(1, 2, 3, 4, 5, 6); }'
assert 66 'fn main() { return add6(1, 2, add6(3, 4, 5, 6, 7, 8), 9, 10, 11); }'
assert 136 'fn main() { return add6(1, 2, add6(3, add6(4, 5, 6, 7, 8, 9), 10, 11, 12, 13), 14, 15, 16); }'

assert 32 'fn ret32() { return 32; } fn main() { return ret32(); }'
assert 32 'fn main() { return ret32(); } fn ret32() { return 32; }'
assert 1 'fn f1() { return 1; } fn f2() { return f1(); } fn f3() { return f2(); } fn main() { return f3(); }'
assert 0 'fn id(x) { return x; } fn main() { return id(0); }'
assert 0 'fn const(x, y) { return x; } fn main() { return const(0, 1); }'
assert 7 'fn main() { return add2(3, 4); } fn add2(x, y) { return x + y; }'
assert 1 'fn main() { return sub2(4, 3); } fn sub2(x, y) { return x - y; }'
assert 55 'fn main() { return fib(9); } fn fib(x) { if (x <= 1) return 1; return fib(x - 1) + fib(x - 2); }'
assert 64 'fn mul6(a, b, c, d, e, f) { return a * b * c * d * e * f; } fn main() { return mul6(2, 2, 2, 2, 2, 2); }'

echo 'OK'
