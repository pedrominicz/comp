#!/usr/bin/env bash

set -e

make

assert() {
  expected="$1"
  input="$2"

  ./m "$input" >tmp.s
  gcc -static -o tmp tmp.s

  actual=0; ./tmp || actual="$?"

  if [ "$actual" -ne "$expected" ]; then
    echo "$input" >&2
    exit 1
  fi
}

assert 0 'fn main() { return 0; }'
assert 1 'fn main() { return 1; }'
assert 1 'fn main() { return -(-1); }'
assert 3 'fn main() { return 5 + 7 - 9; }'
assert 7 'fn main() { return 1 + 3 * 2; }'
assert 4 'fn main() { return (3 + 5) / 2; }'

assert 0 'fn main() { return 0 == 1; }'
assert 1 'fn main() { return 7 == 7; }'
assert 1 'fn main() { return 0 != 1; }'
assert 0 'fn main() { return 7 != 7; }'

assert 1 'fn main() { return !0; }'
assert 0 'fn main() { return !!0; }'
assert 1 'fn main() { return !0 == 1; }'
assert 1 'fn main() { return !!0 == 0; }'
assert 1 'fn main() { return !!7 == 1; }'

assert 0 'fn main() { return 1 > 2; }'
assert 0 'fn main() { return 2 < 1; }'
assert 1 'fn main() { return 1 >= 0; }'
assert 0 'fn main() { return 2 <= 1; }'

assert 1 'fn main() { return 1; 2; 3; }'
assert 2 'fn main() { 1; return 2; 3; }'
assert 3 'fn main() { 1; 2; return 3; }'

assert 0 'fn main() { let a = 3; return 0; }'
assert 3 'fn main() { let a = 3; return a; }'
assert 8 'fn main() { let a = 3; let z = 5; return a + z; }'
assert 6 'fn main() { let a = 3; let b = a; return a + b; }'
assert 6 'fn main() { let a = 3; let b = a; return a + b; }'

assert 3 'fn main() { let a = 1; let a = 2; let a = 3; return a; }'
assert 3 'fn main() { let a = 1; let a = a + 1; let a = a + 1; return a; }'

assert 3 'fn main() { let x = 3; return *&x; }'
assert 3 'fn main() { let x = 3; let y = &x; let z = &y; return **z; }'
assert 5 'fn main() { let x = 3; let y = &x; *y = 5; return x; }'

assert 3 'fn main() { if (0) return 2; return 3; }'
assert 3 'fn main() { if (1 - 1) return 2; return 3; }'
assert 2 'fn main() { if (1) return 2; return 3; }'
assert 2 'fn main() { if (2 - 1) return 2; return 3; }'
assert 4 'fn main() { if (0) { 1; 2; return 3; } else { return 4; } }'
assert 3 'fn main() { if (1) { 1; 2; return 3; } else { return 4; } }'

assert 6 'fn main() { let i = 0; let j = 0; while (i <= 3) { j = i + j; i = i + 1; } return j; }'
assert 3 'fn main() { while (1) { return 3; } return 5; }'
assert 9 'fn main() { let i = 0; while (i < 9) { i = i + 1; } return i; }'

assert 2 'fn main() { let x = 2; { let x = 3; } return x; }'
assert 2 'fn main() { let x = 2; { let x = 3; } { let y = 4; return x; } }'
assert 3 'fn main() { let x = 2; { x = 3; } return x; }'

assert 3 'fn f() { return 3; } fn main() { return f(); }'
assert 3 'fn main() { return f(); } fn f() { return 3; }'
assert 3 'fn f() { return 3; } fn main() { let a = 0; return f(); }'
assert 3 'fn f() { return 3; } fn main() { let a = 0; let b = 0; return f(); }'
assert 3 'fn f() { return 3; } fn main() { let a = 0; let b = 0; let c = 0; return f(); }'

assert 0 'fn const(x, y) { return x; } fn main() { return const(0, 1); }'
assert 2 'fn f(a, b, c, d, e, f) { return b; } fn main() { return f(1, 2, 3, 4, 5, 6); }'
assert 3 'fn f(a, b, c, d, e, f) { return c; } fn main() { return f(1, 2, 3, 4, 5, 6); }'
assert 6 'fn f() { return 1; } fn add6(a, b, c, d, e, f) { return a + b + c + d + e + f; } fn main() { return add6(1, f(), 1, f(), f(), 1); }'
assert 1 'fn f1() { return 1; } fn f2() { return f1(); } fn f3() { return f2(); } fn main() { return f3(); }'
assert 8 'fn main() { return fib(5); } fn fib(x) { if (x <= 1) return 1; return fib(x - 1) + fib(x - 2); }'

echo 'OK'
