#!/usr/bin/env bash

set -e

make

assert() {
  expected="$1"
  input="$2"

  ./m "$input" >tmp.s
  gcc -static -o tmp tmp.s

  actual=0; ./tmp || actual="$?"

  if [ "$actual" -ne "$expected" ]; then
    echo "$input" >&2
    exit 1
  fi
}

assert 0 'fn main() { return 0; }'
assert 1 'fn main() { return 1; }'
assert 1 'fn main() { return -(-1); }'
assert 3 'fn main() { return 5 + 7 - 9; }'
assert 7 'fn main() { return 1 + 3 * 2; }'
assert 4 'fn main() { return (3 + 5) / 2; }'

assert 0 'fn main() { return 0 == 1; }'
assert 1 'fn main() { return 7 == 7; }'
assert 1 'fn main() { return 0 != 1; }'
assert 0 'fn main() { return 7 != 7; }'

assert 1 'fn main() { return !0; }'
assert 0 'fn main() { return !!0; }'
assert 1 'fn main() { return !0 == 1; }'
assert 1 'fn main() { return !!0 == 0; }'
assert 1 'fn main() { return !!7 == 1; }'

assert 0 'fn main() { return 1 > 2; }'
assert 0 'fn main() { return 2 < 1; }'
assert 1 'fn main() { return 1 >= 0; }'
assert 0 'fn main() { return 2 <= 1; }'

assert 1 'fn main() { return 1; 2; 3; }'
assert 2 'fn main() { 1; return 2; 3; }'
assert 3 'fn main() { 1; 2; return 3; }'

assert 3 'fn main() { a = 3; return a; }'
assert 8 'fn main() { a = 3; z = 5; return a + z; }'
assert 6 'fn main() { a = 3; b = a; return a + b; }'
assert 6 'fn main() { a = 3; b = a; return a + b; }'

assert 3 'fn main() { x = 3; return *&x; }'
assert 3 'fn main() { x = 3; y = &x; z = &y; return **z; }'
assert 5 'fn main() { x = 3; y = 5; return *(&x - 8); }'
assert 3 'fn main() { x = 3; y = 5; return *(&y + 8); }'
assert 5 'fn main() { x = 3; y = &x; *y = 5; return x; }'
assert 7 'fn main() { x = 3; y = 5; *(&x - 8) = 7; return y; }'
assert 7 'fn main() { x = 3; y = 5; *(&y + 8) = 7; return x; }'

echo 'OK'
